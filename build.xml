<?xml version="1.0"?>
<project name="PLOP" description="" default="all">
    <!--
        @TODO: Add descriptions for the targets so that they provide
        useful information when listed using "phing -l".
    -->

    <property name="force-coverage" value="true"/>

    <property name="version"        value="0.1.2"/>
    <property name="email"          value="clicky@erebot.net"/>
    <property name="summary"        value="Python Logging On PHP"/>
    <!-- @TODO: Use real values here. -->
    <property name="description"><![CDATA[
PLOP is a rewrite of Python's logging API using PHP.
It aims at keeping compatibility with Python's API
while being more feature-complete than PEAR's Log package
and more user-friendly than Apache's log4php.
]]></property>
    <property name="notes"><![CDATA[
@TODO
]]></property>

    <property name="qa.coverage-db"     value="/tmp/plop.db"/>
    <property name="qa.coverage-tmp"    value="/tmp/plop.xml"/>
    <property name="phar.output_file"   value="PLOP.phar"/>

    <tstamp>
        <!-- Format is, e.g. Sat, 03 Oct 2009, 16:31 -->
        <format property="buildtime" pattern="%a, %d %b %Y, %H:%M"/>
    </tstamp>

    <adhoc-task name="xgettext"><![CDATA[
    class XgettextTask extends Task
    {
        protected $command = 'xgettext';
        protected $filesets = array();

        public function setCommand($command)    { $this->command = $command;    }
        public function getCommand()            { return $this->command;        }

        public function createFileset()
        {
            $num = array_push($this->filesets, new FileSet());
            return $this->filesets[$num-1];
        }

        function main()
        {
            $filesToParse = array();
            foreach ($this->filesets as $fs) {
                $files = $fs->getDirectoryScanner($this->project)->getIncludedFiles();
                foreach($files as $filename) {
                     $f = new PhingFile($fs->getDir($this->project), $filename);
                     $filesToParse[] = $f->getAbsolutePath();
                }
            }

            $command = $this->command . " " . join(" ", $filesToParse);
            $this->log("Executing command: " . $command);
            exec($command, $output, $return);

            if ($return != 0)
                throw new BuildException("Could not execute Doxygen: " . implode(" ", $output));

            foreach ($output as $line) {
                $lowerLine = strtolower($line);

                if (strpos($lowerLine, 'warning') !== FALSE) {
                    $this->log($line, Project::MSG_WARN);
                    continue;
                }

                if (strpos($lowerLine, 'notice') !== FALSE) {
                    $this->log($line, Project::MSG_INFO);
                    continue;
                }

                $this->log($line, Project::MSG_VERBOSE);
            }
        }
    }
    ]]></adhoc-task>

    <fileset dir="src/" id="sources">
        <include name="**/*.php"/>
    </fileset>

    <fileset dir="tests/" id="tests">
        <include name="**/*.php"/>
    </fileset>

    <target name="all" depends="" description=""/>

    <!-- Documentation -->
    <target name="doc" description="" depends="doxygen"/>

    <target name="doxygen" description="">
        <exec command="doxygen" dir="."/>
        <exec command="make" dir="doc/latex"/>
    </target>


    <!-- Unit tests and code coverage -->
    <target name="test" depends="qa_coverage"/>
    <target name="tests" depends="qa_coverage"/>
    <target name="coverage" depends="qa_coverage"/>


    <!-- Quality Assurance -->
    <target name="qa" depends="qa_lint,qa_codesniffer,qa_depend,qa_mess,qa_duplicates,qa_test"/>

    <target name="qa_lint" description="">
        <phplint><fileset refid="sources"/></phplint>
    </target>

    <target name="qa_codesniffer" description="">
        <phpcodesniffer
            standard="Zend"
            showWarnings="true"
            showSniffs="true"
            tabWidth="4"
            sniffs="
Zend_Sniffs_Debug_CodeAnalyzerSniff
Zend_Sniffs_Files_ClosingTagSniff
Zend_Sniffs_NamingConventions_ValidVariableNameSniff
Generic_Sniffs_Functions_FunctionCallArgumentSpacingSniff
Generic_Sniffs_Functions_OpeningFunctionBraceBsdAllmanSniff
Generic_Sniffs_PHP_DisallowShortOpenTagSniff
Generic_Sniffs_WhiteSpace_DisallowTabIndentSniff
PEAR_Sniffs_Classes_ClassDeclarationSniff
PEAR_Sniffs_Functions_FunctionCallSignatureSniff
PEAR_Sniffs_Functions_ValidDefaultValueSniff
PEAR_Sniffs_WhiteSpace_ScopeClosingBraceSniff
Squiz_Sniffs_Functions_GlobalFunctionSniff
Generic_Sniffs_Files_LineLengthSniff
Generic_Sniffs_Files_LineEndingsSniff
"
            verbosity="1"
            >
            <fileset refid="sources"/>
        </phpcodesniffer>
    </target>

    <target name="qa_depend">
        <phpdepend withoutAnnotations="true" file=".">
            <fileset refid="sources"/>
            <analyzer type="coderank-mode" value="method"/>
            <logger type="phpunit-xml" outfile="/dev/null"/>
        </phpdepend>
    </target>

    <target name="qa_mess">
        <phpmd><fileset refid="sources"/></phpmd>
    </target>

    <target name="qa_duplicates" description="">
        <phpcpd>
            <fileset refid="sources"/>
            <formatter type="default" outfile="/dev/null"/>
        </phpcpd>
    </target>

    <target name="qa_pre_coverage" description="">
        <coverage-setup database="${qa.coverage-db}">
            <fileset refid="sources"/>
        </coverage-setup>
    </target>

    <target name="qa_test" description="" depends="qa_pre_coverage">
        <phpunit
            codecoverage="${force-coverage}"
            bootstrap="tests/bootstrap.php"
            >
            <formatter type="plain" usefile="false"/>
            <batchtest><fileset refid="tests"/></batchtest>
        </phpunit>
    </target>

    <target name="qa_coverage" description="" depends="qa_test">
        <mkdir dir="doc"/>
        <mkdir dir="doc/coverage"/>
        <coverage-report outfile="${qa.coverage-tmp}">
            <report todir="doc/coverage" styledir="/usr/share/php/data/phing/etc/"/>
        </coverage-report>
        <if>
            <istrue value="${force-coverage}"/>
            <then>
                <coverage-threshold
                    database="${qa.coverage-db}"
                    perProject="75"
                    perClass="75"
                    perMethod="50"
                    verbose="true"
                    />
            </then>
        </if>
    </target>
</project>
