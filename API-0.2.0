API release notes for Plop version 0.2.0
----------------------------------------

This version of Plop breaks backward compatibility as it uses
a PEAR2-oriented directory layout.
You'll need to adapt your code as a result.

You should use PEAR2's autoloader to use Plop.

The classes have been renamed to be a little closer to PEAR's
naming conventions..
For example, the old stream handler class is now called:
Plop_Handler_Stream.

Also, the classes for configuration parsers were also renamed
(Plop_Config_Format_INI and Plop_Config_Format_XML).
As a result, calls to fileConfig() must be updated.
This affects configuration files a little as the class names
need to be updated to reflect those changes.

To sum it up, the snippets below shows how Plop was used
and how it must be used from now on.

Old usage:
1.  Include "logging.php" from Plop's sources.
2.  Use $logging =& Plop::getInstance(); to retrieve an instance
    of the logging subsystem.
3.  Configure logging, eg. with:
    $logging->fileConfig(
        $configPath,
        array(),
        'XML'
    );
4.  Use $logger = $logging->getLogger(__FILE__); to retrieve
    a logger for the current file.
5.  Log whatever you want with eg. $logger->error('Ouch!'); 

New usage:
1.  Create and install an autoloader which maps class names to
    their file, by simply replacing underscores with the
    DIRECTORY_SEPARATOR and appending the ".php" suffix.
    Eg. Plop_Config_Format_INI
    ->  Plop/Config/Format/INI.php under Linux
2.  Use $logging =& Plop::getInstance(); to retrieve an instance
    of the logging subsystem.
3.  Configure logging, eg. with:
    $logging->fileConfig(
        $configPath,
        array(),
        'Plop_Config_Format_XML'
    );
4.  Use $logger = $logging->getLogger(__FILE__); to retrieve
    a logger for the current file.
5.  Log whatever you want with eg. $logger->error('Ouch!'); 

